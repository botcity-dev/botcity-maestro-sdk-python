{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to BotCity's Maestro SDK. Installation Latest release Using PyPI pip install botcity-maestro-sdk Using conda-forge conda install -c conda-forge botcity-maestro-sdk Latest code pip install git+https://github.com/botcity-dev/botcity-maestro-sdk-python.git","title":"Home"},{"location":"#welcome","text":"Welcome to BotCity's Maestro SDK.","title":"Welcome"},{"location":"#installation","text":"","title":"Installation"},{"location":"#latest-release","text":"","title":"Latest release"},{"location":"#using-pypi","text":"pip install botcity-maestro-sdk","title":"Using PyPI"},{"location":"#using-conda-forge","text":"conda install -c conda-forge botcity-maestro-sdk","title":"Using conda-forge"},{"location":"#latest-code","text":"pip install git+https://github.com/botcity-dev/botcity-maestro-sdk-python.git","title":"Latest code"},{"location":"orchestration/","text":"Orchestration Development is just a step on th process of deploying an automation in production. After the development is done it is required to set up the runtime environment and execute the deployment of the automation in production. When running an automation process in production it is paramount that one can: monitor active automations synchronize related activities schedule tasks analyze logs visualize artifacts produced That is the reason why the orchestrator is the most important tool when running your automations in production. BotMaestro BotMaestro is an automation platform to facilitate the development, deploy and orchestration of automation robots. The main dashboard displays key metrics, such as number of tasks executed, number of available servers, as well as a quick view of the execution queue and latest artifacts produced by the automation pipeline. All functionalities available via the BotMaestro web portal can also be interacted with via: HTTPS API BotMaestroSDK (Python) BotMaestroSDK (Java) BotCLI (Command-Line Interface) Next Steps Check out the API documentation. Let us know where it can be improved.","title":"Orchestration"},{"location":"orchestration/#orchestration","text":"Development is just a step on th process of deploying an automation in production. After the development is done it is required to set up the runtime environment and execute the deployment of the automation in production. When running an automation process in production it is paramount that one can: monitor active automations synchronize related activities schedule tasks analyze logs visualize artifacts produced That is the reason why the orchestrator is the most important tool when running your automations in production.","title":"Orchestration"},{"location":"orchestration/#botmaestro","text":"BotMaestro is an automation platform to facilitate the development, deploy and orchestration of automation robots. The main dashboard displays key metrics, such as number of tasks executed, number of available servers, as well as a quick view of the execution queue and latest artifacts produced by the automation pipeline. All functionalities available via the BotMaestro web portal can also be interacted with via: HTTPS API BotMaestroSDK (Python) BotMaestroSDK (Java) BotCLI (Command-Line Interface)","title":"BotMaestro"},{"location":"orchestration/#next-steps","text":"Check out the API documentation. Let us know where it can be improved.","title":"Next Steps"},{"location":"tutorial/","text":"Tutorial This live tutorial uses Binder to provide you with an complete and interactive environment without installing a single package. It can take a couple minutes to load the tutorial but once it is loaded it is ready to go! Take advantage of our live self-paced tutorial on how to use and explore the Maestro SDK by clicking on this link .","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This live tutorial uses Binder to provide you with an complete and interactive environment without installing a single package. It can take a couple minutes to load the tutorial but once it is loaded it is ready to go! Take advantage of our live self-paced tutorial on how to use and explore the Maestro SDK by clicking on this link .","title":"Tutorial"},{"location":"api/","text":"API The API is divided into the following modules: sdk : this module contains the BotMaestroSDK class model : this module contains data model classes to make parameters and outputs more manageable. In order to make it easy for users, all modules are available via the core module. from botcity.maestro import * The following sections will describe each module in depth.","title":"API"},{"location":"api/#api","text":"The API is divided into the following modules: sdk : this module contains the BotMaestroSDK class model : this module contains data model classes to make parameters and outputs more manageable. In order to make it easy for users, all modules are available via the core module. from botcity.maestro import * The following sections will describe each module in depth.","title":"API"},{"location":"api/model/","text":"Data Models botcity.maestro.model.AlertType ( str , Enum ) Type of alerts to be emitted. Attributes: Name Type Description INFO str Information alert type WARN str Warning alert type ERROR str Error alert type botcity.maestro.model.MessageType ( str , Enum ) Type of message body. Attributes: Name Type Description TEXT str Plain text message body HTML str HTML message body botcity.maestro.model.AutomationTaskState ( str , Enum ) State of a Task. Attributes: Name Type Description START str The task was started. RUNNING str The task is running. FINISHED str The task is finished. CANCELED str The task was canceled. botcity.maestro.model.AutomationTaskFinishStatus ( str , Enum ) Finish status of a task. Attributes: Name Type Description SUCCESS str The task finished successfully. FAILED str The task failed to finish. PARTIALLY_COMPLETED str The task completed part of the expected steps. botcity.maestro.model.ServerMessageType ( str , Enum ) The server message type. Attributes: Name Type Description SUCCESS str Success message ERROR str Error message botcity.maestro.model.ServerMessage dataclass Server response message. Attributes: Name Type Description message str The response message sent by the BotMaestro portal. type ServerMessageType The message type. See ServerMessageType payload str from_json ( payload ) staticmethod Instantiate a ServerMessage object from a JSON payload obtained from the BotMaestro portal. Parameters: Name Type Description Default payload str A JSON string containing message and type. required Returns: Type Description ServerMessage Server response message instance. to_json ( self ) Returns: Type Description str JSON string representation of this object. botcity.maestro.model.AutomationTask dataclass Automation Task. Attributes: Name Type Description id int The task unique identifier. state AutomationTaskState The task state. See AutomationTaskState . parameters Dict[str, object] Dictionary with parameters and values for this task. activity_id int Identifier of the activity. agent_id int Identifier of the agent which created the task. user_creation_id int Identifier of the user which created the task. org_creation_id int Identifier of the organization which created the task. date_creation str Datetime information of when this task was created. date_last_modified str Datetime information of when this task was last modified. test bool Whether or not this task was a test. from_json ( payload ) staticmethod Instantiate a AutomationTask object from a JSON payload obtained from the BotMaestro portal. Parameters: Name Type Description Default payload str A JSON string containing the required metadata. required Returns: Type Description AutomationTask Automation Task instance. to_json ( self ) Returns: Type Description str JSON string representation of this object. botcity.maestro.model.Artifact dataclass Artifact. Attributes: Name Type Description id int The task unique identifier. type str The type of artifact. task_id int The task unique identifier. name str Display name for artifact. filename str File name as provided during upload. storage_filename str Internal file name. storage_filepath str Internal absolute path to file. organization int The organization unique identifier. user Optional[int] The user unique identifier. date_creation str Datetime information of when this artifact was created. from_dict ( data ) staticmethod Instantiate a Artifact object from a dict payload obtained from the BotMaestro portal. Parameters: Name Type Description Default data Dict[str, Any] A dictionary containing the required metadata. required Returns: Type Description Artifact Artifact instance. from_json ( payload ) staticmethod Instantiate a Artifact object from a JSON payload obtained from the BotMaestro portal. Parameters: Name Type Description Default payload str A JSON string containing the required metadata. required Returns: Type Description Artifact Artifact instance. to_json ( self ) Returns: Type Description str JSON string representation of this object. botcity.maestro.model.Column dataclass Representation of a Log column. Attributes: Name Type Description name str The column display name. label str The column unique identifier. width int The suggested log column width when rendering it on the BotMaestro portal. botcity.maestro.model.BotExecution dataclass Bot execution parameters. Attributes: Name Type Description server str The BotMaestro server hostname or IP. task_id str The task unique identifier. token str The access token to be used when communicating with the BotMaestro server. parameters Dict[str, object] Dictionary with parameters and values for this task.","title":"Model"},{"location":"api/model/#data-models","text":"","title":"Data Models"},{"location":"api/model/#botcity.maestro.model.AlertType","text":"Type of alerts to be emitted. Attributes: Name Type Description INFO str Information alert type WARN str Warning alert type ERROR str Error alert type","title":"AlertType"},{"location":"api/model/#botcity.maestro.model.MessageType","text":"Type of message body. Attributes: Name Type Description TEXT str Plain text message body HTML str HTML message body","title":"MessageType"},{"location":"api/model/#botcity.maestro.model.AutomationTaskState","text":"State of a Task. Attributes: Name Type Description START str The task was started. RUNNING str The task is running. FINISHED str The task is finished. CANCELED str The task was canceled.","title":"AutomationTaskState"},{"location":"api/model/#botcity.maestro.model.AutomationTaskFinishStatus","text":"Finish status of a task. Attributes: Name Type Description SUCCESS str The task finished successfully. FAILED str The task failed to finish. PARTIALLY_COMPLETED str The task completed part of the expected steps.","title":"AutomationTaskFinishStatus"},{"location":"api/model/#botcity.maestro.model.ServerMessageType","text":"The server message type. Attributes: Name Type Description SUCCESS str Success message ERROR str Error message","title":"ServerMessageType"},{"location":"api/model/#botcity.maestro.model.ServerMessage","text":"Server response message. Attributes: Name Type Description message str The response message sent by the BotMaestro portal. type ServerMessageType The message type. See ServerMessageType payload str","title":"ServerMessage"},{"location":"api/model/#botcity.maestro.model.ServerMessage.from_json","text":"Instantiate a ServerMessage object from a JSON payload obtained from the BotMaestro portal. Parameters: Name Type Description Default payload str A JSON string containing message and type. required Returns: Type Description ServerMessage Server response message instance.","title":"from_json()"},{"location":"api/model/#botcity.maestro.model.ServerMessage.to_json","text":"Returns: Type Description str JSON string representation of this object.","title":"to_json()"},{"location":"api/model/#botcity.maestro.model.AutomationTask","text":"Automation Task. Attributes: Name Type Description id int The task unique identifier. state AutomationTaskState The task state. See AutomationTaskState . parameters Dict[str, object] Dictionary with parameters and values for this task. activity_id int Identifier of the activity. agent_id int Identifier of the agent which created the task. user_creation_id int Identifier of the user which created the task. org_creation_id int Identifier of the organization which created the task. date_creation str Datetime information of when this task was created. date_last_modified str Datetime information of when this task was last modified. test bool Whether or not this task was a test.","title":"AutomationTask"},{"location":"api/model/#botcity.maestro.model.AutomationTask.from_json","text":"Instantiate a AutomationTask object from a JSON payload obtained from the BotMaestro portal. Parameters: Name Type Description Default payload str A JSON string containing the required metadata. required Returns: Type Description AutomationTask Automation Task instance.","title":"from_json()"},{"location":"api/model/#botcity.maestro.model.AutomationTask.to_json","text":"Returns: Type Description str JSON string representation of this object.","title":"to_json()"},{"location":"api/model/#botcity.maestro.model.Artifact","text":"Artifact. Attributes: Name Type Description id int The task unique identifier. type str The type of artifact. task_id int The task unique identifier. name str Display name for artifact. filename str File name as provided during upload. storage_filename str Internal file name. storage_filepath str Internal absolute path to file. organization int The organization unique identifier. user Optional[int] The user unique identifier. date_creation str Datetime information of when this artifact was created.","title":"Artifact"},{"location":"api/model/#botcity.maestro.model.Artifact.from_dict","text":"Instantiate a Artifact object from a dict payload obtained from the BotMaestro portal. Parameters: Name Type Description Default data Dict[str, Any] A dictionary containing the required metadata. required Returns: Type Description Artifact Artifact instance.","title":"from_dict()"},{"location":"api/model/#botcity.maestro.model.Artifact.from_json","text":"Instantiate a Artifact object from a JSON payload obtained from the BotMaestro portal. Parameters: Name Type Description Default payload str A JSON string containing the required metadata. required Returns: Type Description Artifact Artifact instance.","title":"from_json()"},{"location":"api/model/#botcity.maestro.model.Artifact.to_json","text":"Returns: Type Description str JSON string representation of this object.","title":"to_json()"},{"location":"api/model/#botcity.maestro.model.Column","text":"Representation of a Log column. Attributes: Name Type Description name str The column display name. label str The column unique identifier. width int The suggested log column width when rendering it on the BotMaestro portal.","title":"Column"},{"location":"api/model/#botcity.maestro.model.BotExecution","text":"Bot execution parameters. Attributes: Name Type Description server str The BotMaestro server hostname or IP. task_id str The task unique identifier. token str The access token to be used when communicating with the BotMaestro server. parameters Dict[str, object] Dictionary with parameters and values for this task.","title":"BotExecution"},{"location":"api/sdk/","text":"BotMaestro SDK botcity.maestro.sdk.BotMaestroSDK access_token property writable The access token server property writable The server address __init__ ( self , server = None , login = None , key = None ) special Main class to interact with the BotMaestro web portal. This class offers methods to send alerts, messages, create log entries, post artifacts and more. Parameters: Name Type Description Default server Optional[str] The server IP or name None login Optional[str] The username provided via server configuration. Available under Dev. Environment None key Optional[str] The access key provided via server configuration. Available under Dev. Environment None Attributes: Name Type Description access_token str The access token obtained via login. alert ( self , task_id , title , message , alert_type ) Register an alert message on the BotMaestro portal. Parameters: Name Type Description Default task_id str The activity label required title str A title associated with the alert message required message str The alert message required alert_type AlertType The alert type to be used. See AlertType required Returns: Type Description ServerMessage Server response message. See ServerMessage create_task ( self , activity_label , parameters , test = False ) Creates a task to be executed on the BotMaestro portal. Parameters: Name Type Description Default activity_label str The activity unique identified. required parameters Dict[str, object] Dictionary with parameters and values for this task. required test bool Whether or not the task is a test. False Returns: Type Description AutomationTask Automation Task. See AutomationTask delete_log ( self , activity_label ) Fetch log information. Parameters: Name Type Description Default activity_label str The activity unique identifier. required date Initial date for log information in the format DD/MM/YYYY. If empty all information is retrieved. required Returns: Type Description ServerMessage Log entry list. Each element in the list is a dictionary in which keys are Column names and values are the column value. finish_task ( self , task_id , status , message = '' ) Finishes a given task. Parameters: Name Type Description Default task_id str The task unique identifier. required status AutomationTaskFinishStatus The condition in which the task must be finished. See AutomationTaskFinishStatus required message str A message to be associated with this action. '' Returns: Type Description ServerMessage Server response message. See ServerMessage get_artifact ( self , artifact_id ) Retrieve an artifact from the BotMaestro portal. Parameters: Name Type Description Default artifact_id int The artifact unique identifier. required Returns: Type Description Tuple[str, bytes] Tuple containing the artifact name and an array of bytes which are the binary content of the artifact. get_log ( self , activity_label , date = '' ) Fetch log information. Parameters: Name Type Description Default activity_label str The activity unique identifier. required date Optional[str] Initial date for log information in the format DD/MM/YYYY. If empty all information is retrieved. '' Returns: Type Description List[Dict[str, object]] Log entry list. Each element in the list is a dictionary in which keys are Column names and values are the column value. get_task ( self , task_id ) Return details about a given task. Parameters: Name Type Description Default task_id str The task unique identifier. required Returns: Type Description AutomationTask Automation Task. See AutomationTask list_artifacts ( self ) List all artifacts available for the organization. Returns: Type Description List[botcity.maestro.model.Artifact] List of artifacts. See Artifact login ( self , server = None , login = None , key = None ) Obtain an access token with the configured BotMaestro portal. Arguments are optional and can be used to configure or overwrite the object instantiation values. Parameters: Name Type Description Default server Optional[str] The server IP or name None login Optional[str] The username provided via server configuration. Available under Dev. Environment None key Optional[str] The access key provided via server configuration. Available under Dev. Environment None logoff ( self ) Revoke the access token used to communicate with the BotMaestro portal. message ( self , email , users , subject , body , msg_type , group = None ) Send an email message to the list of email and users given. Parameters: Name Type Description Default email List[str] List of emails to receive the message. required users List[str] List of usernames registered on the BotMaestro portal to receive the message. required subject str The message subject. required body str The message body. required msg_type MessageType The message body type. See MessageType required group Optional[str] The message group information. None Returns: Type Description ServerMessage Server response message. See ServerMessage new_log ( self , activity_label , columns ) Create a new log on the BotMaestro portal. Parameters: Name Type Description Default activity_label str The activity unique identifier. required columns List[botcity.maestro.model.Column] A list of Columns required Returns: Type Description ServerMessage Server response message. See ServerMessage new_log_entry ( self , activity_label , values ) Creates a new log entry. Parameters: Name Type Description Default activity_label str The activity unique identifier. required values Dict[str, object] Dictionary in which the key is the column label and value is the entry value. required Returns: Type Description ServerMessage Server response message. See ServerMessage post_artifact ( self , task_id , artifact_name , filepath ) Upload a new artifact into the BotMaestro portal. Parameters: Name Type Description Default task_id int The task unique identifier. required artifact_name str The name of the artifact to be displayed on the portal. required filepath str The file to be uploaded. required Returns: Type Description ServerMessage Server response message. See ServerMessage restart_task ( self , task_id ) Restarts a given task. Parameters: Name Type Description Default task_id str The task unique identifier. required Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"BotMaestro"},{"location":"api/sdk/#botmaestro-sdk","text":"","title":"BotMaestro SDK"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK","text":"","title":"BotMaestroSDK"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.access_token","text":"The access token","title":"access_token"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.server","text":"The server address","title":"server"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.__init__","text":"Main class to interact with the BotMaestro web portal. This class offers methods to send alerts, messages, create log entries, post artifacts and more. Parameters: Name Type Description Default server Optional[str] The server IP or name None login Optional[str] The username provided via server configuration. Available under Dev. Environment None key Optional[str] The access key provided via server configuration. Available under Dev. Environment None Attributes: Name Type Description access_token str The access token obtained via login.","title":"__init__()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.alert","text":"Register an alert message on the BotMaestro portal. Parameters: Name Type Description Default task_id str The activity label required title str A title associated with the alert message required message str The alert message required alert_type AlertType The alert type to be used. See AlertType required Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"alert()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.create_task","text":"Creates a task to be executed on the BotMaestro portal. Parameters: Name Type Description Default activity_label str The activity unique identified. required parameters Dict[str, object] Dictionary with parameters and values for this task. required test bool Whether or not the task is a test. False Returns: Type Description AutomationTask Automation Task. See AutomationTask","title":"create_task()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.delete_log","text":"Fetch log information. Parameters: Name Type Description Default activity_label str The activity unique identifier. required date Initial date for log information in the format DD/MM/YYYY. If empty all information is retrieved. required Returns: Type Description ServerMessage Log entry list. Each element in the list is a dictionary in which keys are Column names and values are the column value.","title":"delete_log()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.finish_task","text":"Finishes a given task. Parameters: Name Type Description Default task_id str The task unique identifier. required status AutomationTaskFinishStatus The condition in which the task must be finished. See AutomationTaskFinishStatus required message str A message to be associated with this action. '' Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"finish_task()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.get_artifact","text":"Retrieve an artifact from the BotMaestro portal. Parameters: Name Type Description Default artifact_id int The artifact unique identifier. required Returns: Type Description Tuple[str, bytes] Tuple containing the artifact name and an array of bytes which are the binary content of the artifact.","title":"get_artifact()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.get_log","text":"Fetch log information. Parameters: Name Type Description Default activity_label str The activity unique identifier. required date Optional[str] Initial date for log information in the format DD/MM/YYYY. If empty all information is retrieved. '' Returns: Type Description List[Dict[str, object]] Log entry list. Each element in the list is a dictionary in which keys are Column names and values are the column value.","title":"get_log()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.get_task","text":"Return details about a given task. Parameters: Name Type Description Default task_id str The task unique identifier. required Returns: Type Description AutomationTask Automation Task. See AutomationTask","title":"get_task()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.list_artifacts","text":"List all artifacts available for the organization. Returns: Type Description List[botcity.maestro.model.Artifact] List of artifacts. See Artifact","title":"list_artifacts()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.login","text":"Obtain an access token with the configured BotMaestro portal. Arguments are optional and can be used to configure or overwrite the object instantiation values. Parameters: Name Type Description Default server Optional[str] The server IP or name None login Optional[str] The username provided via server configuration. Available under Dev. Environment None key Optional[str] The access key provided via server configuration. Available under Dev. Environment None","title":"login()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.logoff","text":"Revoke the access token used to communicate with the BotMaestro portal.","title":"logoff()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.message","text":"Send an email message to the list of email and users given. Parameters: Name Type Description Default email List[str] List of emails to receive the message. required users List[str] List of usernames registered on the BotMaestro portal to receive the message. required subject str The message subject. required body str The message body. required msg_type MessageType The message body type. See MessageType required group Optional[str] The message group information. None Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"message()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.new_log","text":"Create a new log on the BotMaestro portal. Parameters: Name Type Description Default activity_label str The activity unique identifier. required columns List[botcity.maestro.model.Column] A list of Columns required Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"new_log()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.new_log_entry","text":"Creates a new log entry. Parameters: Name Type Description Default activity_label str The activity unique identifier. required values Dict[str, object] Dictionary in which the key is the column label and value is the entry value. required Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"new_log_entry()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.post_artifact","text":"Upload a new artifact into the BotMaestro portal. Parameters: Name Type Description Default task_id int The task unique identifier. required artifact_name str The name of the artifact to be displayed on the portal. required filepath str The file to be uploaded. required Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"post_artifact()"},{"location":"api/sdk/#botcity.maestro.sdk.BotMaestroSDK.restart_task","text":"Restarts a given task. Parameters: Name Type Description Default task_id str The task unique identifier. required Returns: Type Description ServerMessage Server response message. See ServerMessage","title":"restart_task()"}]}